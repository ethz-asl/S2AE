function prepareFig(size, scaling, fontSize, lineWidth, useLaTeX, useMathAxis, fontName)
% prepareFig v5.0 by Florian Pfaff pfaff@kit.edu

% size: Set the target size of the plot.
size = [8, 6];
% scaling: Scaling of the plot. This can help, e.g., to prevent
% large legend boxes.
scaling = 3;
% fontSize: Set the size of the font used.
fontSize = 10;
% lineWidth: Set the width of the lines of the plot.
lineWidth = 0.6;
% useLaTeX: Choose whether text (axis labels, tick labels, legends)
% should be rendered using LaTeX
useLaTeX = true;
% useMathAxis: Logical with up to three entries
% Choose if math mode should be invoked for axis labels. If only
% one logical is given, math mode is enabled/disabled for all axes.
useMathAxis(:, 1) = true;
% Font to use (only relevant if LaTeX is not used)
fontName = 'Times';

% Changelog:
% 5.0 16-11-2019 Now using arguments block of Matlab
% 4.8 24-11-2018 Papersize is set first. This prevents a messup of the
% tick labels if the number of tick labels changes afterward.
% 4.7 Remove AxesToolbars (for 2018b and later)
% 4.6 Fixed bug introduced in previous change
% 4.5 Strings modified directly via .XLabel.String etc.
% 4.4 Font name change possible
% 4.3 Also handles lines generated by fplot
% 4.2 Correctly handle tick lables with 10^{x}
% 4.1 Shift by 10 units on screen
% 4.0 Adding $ $ to tick labels when real numbers or \pi is found.
% 3.1 allows diabling LaTeX
paperSize = size * scaling;
set(gcf, ... Comment in next line to make background transparent. For export_fig, -transparent can be used instead
    ... %'Color', 'None', ...
    'InvertHardCopy', 'Off', ...
    'Units', 'centimeters', ...
    'Position', [10, 0, paperSize(1), paperSize(2)], ...
    'PaperPositionMode', 'manual', ...
    'PaperUnits', 'centimeters', ...
    'PaperSize', paperSize, ...
    'PaperPosition', [0, 0, paperSize]);
assert((scaling > 0.1) && (scaling < 10));
assert((fontSize > 3) && (fontSize < 20));
assert((lineWidth > 0.1) && (lineWidth < 3));
assert(islogical(useMathAxis));

switch numel(useMathAxis)
    case 1
        useMathXAxis = useMathAxis;
        useMathYAxis = useMathAxis;
        useMathZAxis = useMathAxis;
    case 2
        useMathXAxis = useMathAxis(1);
        useMathYAxis = useMathAxis(2);
        useMathZAxis = false;
    case 3
        useMathXAxis = useMathAxis(1);
        useMathYAxis = useMathAxis(2);
        useMathZAxis = useMathAxis(3);
end
delete(findall(gcf, 'Type', 'AxesToolbar')); % Remove all AxesToolbars (for Matlab 2018b and later)
allAxes = findall(gcf, 'Type', 'Axes');
box on
set(allAxes, 'LineWidth', lineWidth*scaling);
set([findall(allAxes, 'type', 'Line'), findall(allAxes, 'type', 'FunctionLine')], 'LineWidth', lineWidth*scaling);
set(allAxes, 'Color', 'none'); % Otherwise, axis will not be transparent, only figure background

set(allAxes, 'FontSize', fontSize*scaling);
allText = findall(gca, 'Type', 'Text');
set(allText, 'FontSize', fontSize*scaling);
% delete(title('')); % Set title blank and delete object (so it won't turn up as additional text field)
    function addMathModeToHandle(h)
        if isempty(strfind(h.String, '$'))
            h.String = ['$', h.String, '$'];
        end
    end
if useLaTeX
    if ~isempty(allAxes(1).XLabel.String) && useMathXAxis
        addMathModeToHandle(allAxes(1).XLabel);
    end
    if ~isempty(allAxes(1).YLabel.String) && useMathYAxis
        addMathModeToHandle(allAxes(1).YLabel);
    end
    if ~isempty(allAxes(1).ZLabel.String) && useMathZAxis
        addMathModeToHandle(allAxes(1).ZLabel);
    end
    tickLabels = {allAxes(1).XTickLabel, allAxes(1).YTickLabel, allAxes(1).ZTickLabel};
    for i = 1:numel(tickLabels)
        for j = 1:numel(tickLabels{i})
            % If is number or includes pi, add $ (only if not yet
            % included)
            if (~isnan(str2double(tickLabels{i}{j})) || contains(tickLabels{i}{j}, '\pi') || contains(tickLabels{i}{j}, '10^{')) && ~contains(tickLabels{i}{j}, '$')
                tickLabels{i}{j} = ['$', tickLabels{i}{j}, '$'];
            end
        end
    end
    allAxes(1).XTickLabel = tickLabels{1};
    allAxes(1).YTickLabel = tickLabels{2};
    allAxes(1).ZTickLabel = tickLabels{3};
    set(allAxes, 'ticklabelinterpreter', 'latex');
    set(findobj(gcf, 'type', 'legend'), 'Interpreter', 'latex', 'FontSize', fontSize*scaling); % To test
    set(allText(isvalid(allText)), 'interpreter', 'latex');
else
    set(findall(gcf, 'Type', 'Axes'), 'FontName', fontName);
    set(allText(isvalid(allText)), 'FontName', fontName);
end

end